import React, { type Dispatch, type ReactNode, createContext, useContext, useReducer } from 'react';

export interface {{ pascalCase name }}State {
    count: number;
}

export type {{ pascalCase name }}Actions =
    | {
        type: 'increment'
    }
    | {
        type: 'decrement'
    };

export interface {{ pascalCase name }}ContextInterface {
    state: {{ pascalCase name }}State;
    dispatch: Dispatch<{{ pascalCase name }}Actions>;
}

interface {{ pascalCase name }}ProviderProps {
    children: ReactNode;
}

export const {{ pascalCase name }}Context = createContext<{{ pascalCase name }}ContextInterface | undefined>(undefined);

function {{ camelCase name }}Reducer(state: {{ pascalCase name }}State, action: {{ pascalCase name }}Actions) {
    if (action.type === 'increment') {
        return { count: state.count + 1 };
    } else if (action.type === 'decrement') {
        return { count: state.count - 1 };
    } else {
        // @ts-ignore
        throw new Error(`Unhandled action type: ${action.type}`);
    }
}

export function use{{ pascalCase name }}() {
    const context = useContext({{ pascalCase name }}Context);

    if (context === undefined) {
        throw new Error('use{{ pascalCase name }} must be used within a {{ pascalCase name }}Provider');
    }

    return context;
}

export default function {{ pascalCase name }}Provider({ children }: ) {
    const [state, dispatch] = useReducer({{ camelCase name }}Reducer, { count: 0 });
    // NOTE: you *might* need to memoize this value
    // Learn more in http://kcd.im/optimize-context
    const value = { state, dispatch };

    return (
        <{{ pascalCase name }}Context.Provider value={value}>
            {children}
        </{{ pascalCase name }}Context.Provider>
    );
}
